---
title: "nasapower"
author: "Adam H. Sparks"
output:
  rmarkdown::html_vignette:
    toc: true
vignette: >
  %\VignetteIndexEntry{nasapower}
  %\VignetteEngine{knitr::rmarkdown_notangle}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE,
                      comment = "#>",
                      fig.width = 7,
                      fig.height = 7,
                      fig.align = "center",
                      fig.path = "vignettes/")
```

## Introduction

_nasapower_ aims to make it quick and easy to automate downloading NASA [POWER](https://power.larc.nasa.gov) global meteorology, surface solar energy and climatology data  data in your R session as a tidy data frame for analysis and use in modelling or other purposes using `get_power()`.
POWER (Prediction Of Worldwide Energy Resource) data are freely available for download through a web interface with a spatial resolution of 0.5 x 0.625 degree latitude and longitude for meteorology and  1 x 1 degree latitude and longitude for solar parameters with various temporal resolutions depending on the POWER parameter and community.

## Using get_power() to fetch POWER data

The `get_power()` function has eight possible arguments and returns a data frame with a metadata header in the current R session.

### Example fetching daily data for a single point

Fetch daily "AG" community temperature, relative humidity and precipitation for January 1985 for Kingsthorpe, Queensland, Australia.

```{r get-ag}
library("nasapower")
daily_single_ag <- get_power(
  community = "ag",
  lonlat = c(151.81, -27.48),
  pars = c("RH2M", "T2M", "PRECTOTCORR"),
  dates = c("1985-01-01", "1985-01-31"),
  temporal_api = "daily"
)

daily_single_ag
```

### Example fetching daily data for an area

Fetch daily "ag" community relative humidity and temperature for south east Queensland region.

```{r daily-region}
daily_region_ag <- get_power(
  community = "ag",
  lonlat = c(150.5, -28.5 , 153.5, -25.5),
  pars = c("RH2M", "T2M"),
  dates = c("1985-01-01", "1985-01-02"),
  temporal_api = "daily"
)

daily_region_ag
```

### Example fetching interannual data for an area

Fetch interannual solar cooking parameters for south east Queensland region.

```{r interannual}
interannual_re <- get_power(
  community = "re",
  lonlat = c(150.5, -28.5 , 153.5, -25.5),
  dates = c("1984", "1985"),
  temporal_api = "monthly",
  pars = c("CLRSKY_SFC_SW_DWN",
           "ALLSKY_SFC_SW_DWN")
)

interannual_re
```

### Example fetching climatology data

Climatology data can be retrieved for point or regional areas as demonstrated previously.
Change the `temporal_api` value to "climatology" to get these data.

Fetch "ag" climatology for temperature and relative humidity for Kingsthorpe, Queensland, Australia.

```{r get-climatology}
climatology_ag <- get_power(
  community = "ag",
  pars = c("T2M", "RH2M"),
  lonlat = c(151.81, -27.48),
  temporal_api = "climatology"
)

climatology_ag
```

_Note_ the associated metadata in the data frame header are not saved if the data are exported to a file format other than an R data format, _e.g._, .Rdata, .rda or .rds.

## Interrogating the API for available parameters

The POWER API offers functionality to get detailed information on any parameter offered or all parameters that are offered for a given community and temporal API.
This can be used to find available parameter names and definitions for each community and temporal API.

Fetch the complete available information for the temperature at 2 metres above the Earth's surface, T2M.

```{r t2m-information}
query_parameters(par = "T2M")
```

Fetch complete temporal and community specific attribute information for "T2M" in the "ag" community for the "hourly" temporal API.

```{r t2m-ag-hourly}
query_parameters(par = "T2M",
                 community = "ag",
                 temporal_api = "hourly")
```

Fetch complete temporal and community specific attribute information for all parameters in the "ag" community for the "hourly" temporal API.

```{r complete-ag-hourly}
query_parameters(community = "ag",
                 temporal_api = "hourly")
```

## A Note on API Throttling

The POWER API endpoints limit queries to prevent overloads due to repetitive and rapid requests.
If you find that the API is throttling your queries, I suggest that you investigate the use of `limit_rate()` from [_ratelimitr_](https://cran.r-project.org/package=ratelimitr) to create self-limiting functions that will respect the rate limits that the API has in place.
It is best to check the [POWER website](https://power.larc.nasa.gov/docs/services/api/#rate-limiting) for the latest rate limits as they differ between temporal APIs and may change over time as the project matures.

## References

<https://power.larc.nasa.gov>

<https://power.larc.nasa.gov/docs/methodology/>
